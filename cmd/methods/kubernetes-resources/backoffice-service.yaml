#    EPOS Open Source - Local installation with Kubernetes
#    Copyright (C) 2023  EPOS ERIC
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
kind: Deployment
apiVersion: apps/v1
metadata:
  name: backoffice-deployment 
spec:
  replicas: 1 # maybe more, no problem should happen with software heart 
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: epos-backoffice
      version: ${DEPLOY_TAG}
  template:
    metadata:
      labels:
        app: epos-backoffice
        version: ${DEPLOY_TAG}
      annotations:
        docker-metadata: DOCKER-METADATA
    spec:
      containers:
      - name: backoffice-service
        image: ${DOCKER_REGISTRY}/${BACKOFFICE_SERVICE_IMAGE}
        env:
        - name: PERSISTENCE_NAME
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: persistence_name
        - name: POSTGRESQL_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: postgresql_connection_string
        - name: CONNECTION_POOL_INIT_SIZE
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: datametadataservice_connectionpoolinitsize
        - name: CONNECTION_POOL_MIN_SIZE
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: datametadataservice_connectionpoolminsize
        - name: CONNECTION_POOL_MAX_SIZE
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: datametadataservice_connectionpoolmaxsize
        - name: BASECONTEXT
          valueFrom:
            secretKeyRef:
              name: systemsecrets
              key: base_context

        imagePullPolicy: Always
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: backoffice-port
        volumeMounts:
          - name: backoffice-pvc
            mountPath: /backoffice
          - name: logging-config-volume
            mountPath: /etc/log4j2/
      volumes:
        - name: backoffice-pvc
          persistentVolumeClaim:
            claimName: backoffice-pvc
        - name: logging-config-volume
          configMap:
            name: logging-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backoffice-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: Service
apiVersion: v1
metadata:
  name: backoffice-service
  labels:
    app: epos-backoffice
    version: ${DEPLOY_TAG}
spec:
  selector:
    app: epos-backoffice
    version: ${DEPLOY_TAG}
  ports:
  - protocol: TCP
    port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backoffice-ingress
  labels:
    app: epos-backoffice
    version: ${DEPLOY_TAG}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /api/backoffice-service/v1/
spec:
  ingressClassName: ${INGRESS_CLASS}
  rules:
  - http:
      paths:
      - path: ${DEPLOY_PATH}api/backoffice-service/v1/
        pathType: Prefix
        backend:
          service:
            name: backoffice-service
            port:
              number: 8080